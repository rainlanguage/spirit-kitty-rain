/* .flow() expression for minting token during whitelist period */


/* START SOURCE 0 */

msig-addr: 0x0000000000000000000000000000000000000000000000000000000000000001,

sentinel: 0xfea74d0c9bf4a3c28f0dd0674db22a3d7f8bf259c56af19f4ac1e735b156974f,
sentinel721: 0xfe90d819490b07580877ce7c3005704048c62af96c6745886d7e356e0b63924a,

this: context<0 1>(),
sender: context<0 0>(),

/* the token we want to mint */
kitty: context<1 0>(),
litter: context<1 1>(),

token-id: encode-256<8 8>(litter kitty),

start: get(hash(litter 0x1)),

/* 48 hour whitelist */
whitelist-duration: mul(60 60 24 2),

/* is whitelist period */
: ensure(greater-than(block-timestamp() start)),
: ensure(less-than(block-timestamp() add(start whitelist-duration))),

/* is valid token id */
: ensure(less-than(kitty 148)),
: ensure(less-than(litter 148)),

/* is not Purebred (use Purebred expression instead) */
: ensure(not(equal-to(kitty litter))),

/* is not soulbound kitty x_00 (use ARHero expression instead) */
: ensure(not(is-zero(kitty))),

/* is approved for whitelist */
key-address: hash(litter 0x1 sender),
: ensure(get(key-address)),

/* is not already minted */
: ensure(not(erc-721-owner-of(this token-id))),

/* fetch ETH/USD price (assumes native is ETH) */
feed: 0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419,
/* this pair has 60min heartbeat, so we set at bit more than heartbeat */
stale-after: mul(60 75),
price: chainlink-price(feed stale-after),

/* $250 USD equivalence */
amount: prb-div(250e18 price),

/* increment mint counter for this litter (only occurs for whitelist mints) */
key-mint-counter: hash(litter 0x2),
mint-counter: get(key-mint-counter),
: set(key-mint-counter add(mint-counter 1)),

/* flows */
erc1155s: sentinel,
erc721s: sentinel,
erc20s: sentinel,
natives from to amount-native: sentinel sender msig-addr amount,
burns: sentinel721,
mints owner id: sentinel721 sender token-id;

/* END SOURCE 0 */
