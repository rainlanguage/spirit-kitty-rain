/* expressions for handling transfers (i.e. soulbound logic) */
/* and validating token id when getting tokenURI */
@0x47ed85f917e187757bff09371cedcf5c0eb277c27e4673feb2d3cc040c66c993
@0xb45a690d69760662f71ac675f2f411c5462bf6bb0fef4167f48c7cacd99304fb

/* START SOURCE 0 */
/* sourceHandleTransfer */

/* litter: decode-256<0 8>(transfer-token-id()), */
/* kitty: decode-256<8 8>(transfer-token-id()), */

/* litter 00 (00_x kitty council) tokens are all soulbound */
/* also allows mints (i.e. from address(0)) */
/* : ensure(or(not(transfer-caller()) litter)), */

/* kitty 00 (x_00 ARHero) tokens are all soulbound */
/* also allows mints (i.e. from address(0)) */
/* : ensure(or(not(transfer-caller()) kitty)); */
:;

/* END SOURCE 0 */


/* START SOURCE 1 */
/* sourceTokenURI */
/* note that this reverts if the `tokenId` has not been minted yet */

token-id: context<1 0>(),

litter: decode-256<0 8>(token-id),
kitty: decode-256<8 8>(token-id),

/* is valid token id */
: ensure(less-than(kitty 148)),
: ensure(less-than(litter 148)),

/* return tokenId */
_: token-id;

/* END SOURCE 1 */
