/* .flow() expression to specify whitelist start time */
@0xc4a4ab154dec61b0036b5882af23240a1ad518ce6c3212110585fca3647cd304


/* START SOURCE 0 */

sentinel: 0xfea74d0c9bf4a3c28f0dd0674db22a3d7f8bf259c56af19f4ac1e735b156974f,
sentinel721: 0xfe90d819490b07580877ce7c3005704048c62af96c6745886d7e356e0b63924a,

sender: context<0 0>(),
this: context<0 1>(),

/* the litter we are managing */
council-kitty: context<1 0>(),
/* alias */
litter: council-kitty,

/* configurable whitelist start timer, in seconds */
delay: context<1 1>(),

/* 00_x */
leader-id: encode-256<8 8>(council-kitty 0),

/* caller must be Litter Leader */
: ensure(equal-to(erc-721-owner-of(this leader-id) sender)),

key-counter: hash(litter 0x0),
approved-counter: get(key-counter),

/* must have approved at least 150 addresses */
: ensure(greater-than(approved-counter 149)),

key-start: hash(litter 0x1),
start: get(key-start),

/* cannot reschedule whitelist */
: ensure(not(start)),

: set(key-start add(block-timestamp() delay)),

/* flows */
/* no flows should occur in begin whitelist flow, we're just setting store values */
erc1155s: sentinel,
erc721s: sentinel,
erc20s: sentinel,
natives: sentinel,
burns: sentinel721,
mints: sentinel721;

/* END SOURCE 0 */
